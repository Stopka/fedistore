### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

type Feed {
  avatar: String
  bot: Boolean
  createdAt: DateTime
  description: String!
  displayName: String!
  domain: String!
  fields: [Field!]!
  followersCount: Int
  followingCount: Int
  foundAt: DateTime!
  id: ID!
  lastStatusAt: DateTime
  locked: Boolean!
  name: String!
  node: Node!
  parent: Feed
  refreshedAt: DateTime
  statusesCount: Int
  type: FeedTypeEnum!
  url: String!
}

type FeedList {
  items: [Feed!]!
  paging: Paging!
}

input FeedQueryInput {
  search: String! = ""
}

enum FeedTypeEnum {
  account
  channel
}

type Field {
  name: String!
  value: String!
}

type GeoIp {
  city_name: String
  continent_name: String
  country_iso_code: String
  country_name: String
  location: String
  region_iso_code: String
  region_name: String
}

type Node {
  accountFeedCount: Int
  channelFeedCount: Int
  domain: String!
  foundAt: DateTime!
  geoip: GeoIp
  halfYearActiveUserCount: Int
  id: ID!
  monthActiveUserCount: Int
  name: String
  openRegistrations: Boolean
  refreshAttemptedAt: DateTime
  refreshedAt: DateTime
  serverIps: [String!]
  softwareName: String
  softwareVersion: String
  standardizedSoftwareVersion: String
  statusesCount: Int
  totalUserCount: Int
}

type NodeList {
  items: [Node!]!
  paging: Paging!
}

input NodeQueryInput {
  search: String! = ""
  sortBy: NodeSortingByEnum = refreshedAt
  sortWay: SortingWayEnum = desc
}

enum NodeSortingByEnum {
  accountFeedCount
  domain
  halfYearActiveUserCount
  monthActiveUserCount
  openRegistrations
  refreshedAt
  softwareName
  statusesCount
  totalUserCount
}

type Paging {
  hasNext: Boolean!
}

input PagingInput {
  page: Int! = 0
}

type Query {
  listFeeds(paging: PagingInput! = {page: 0}, query: FeedQueryInput! = {search: ""}): FeedList
  listNodes(paging: PagingInput! = {page: 0}, query: NodeQueryInput! = {sortBy: refreshedAt, sortWay: desc}): NodeList
  listStats(query: StatsQueryInput! = {sortBy: nodeCount, sortWay: desc}): StatsList
}

type Sorting {
  by: String!
  way: SortingWayEnum!
}

enum SortingWayEnum {
  asc
  desc
}

type Stats {
  accountFeedCount: Int!
  channelFeedCount: Int!
  nodeCount: Int!
  softwareName: String!
}

type StatsList {
  items: [Stats!]!
}

input StatsQueryInput {
  sortBy: StatsSortingByEnum = nodeCount
  sortWay: SortingWayEnum = desc
}

enum StatsSortingByEnum {
  accountFeedCount
  channelFeedCount
  nodeCount
  softwareName
}